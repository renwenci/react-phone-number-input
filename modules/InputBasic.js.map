{"version":3,"sources":["../source/InputBasic.js"],"names":["PureComponent","Component","InputBasic","state","onChange","event","props","value","newValue","target","format","indexOf","slice","setState","onBlur","_event","stopPropagation","preventDefault","focus","input","storeInput","ref","country","metadata","onFocus","rest","propTypes","string","isRequired","func","object"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAEA;AACA,IAAMA,gBAAgB,gBAAMA,aAAN,IAAuB,gBAAMC,SAAnD;;AAEA;;;;;;;IAOqBC,U;;;;;;;;;;;;;;4LAsCpBC,K,GAAQ,E,QAERC,Q,GAAW,UAACC,KAAD,EACX;AAAA,OACSD,QADT,GACsB,MAAKE,KAD3B,CACSF,QADT;AAAA,OAESG,KAFT,GAEmB,MAAKJ,KAFxB,CAESI,KAFT;;;AAIC,OAAIC,WAAW,wCAA2BH,MAAMI,MAAN,CAAaF,KAAxC,CAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAIC,aAAaD,KAAjB,EACA;AACC,QAAI,MAAKG,MAAL,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8BN,MAAMI,MAAN,CAAaF,KAA3C,MAAsD,CAA1D,EACA;AACC;AACAC,gBAAWA,SAASI,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACA;AACD;;AAED;AACA;AACA;AACA,SAAKC,QAAL,CAAc,EAAEN,OAAOC,QAAT,EAAd,EAAmC;AAAA,WAAMJ,SAASI,QAAT,CAAN;AAAA,IAAnC;AACA,G,QAeDM,M,GAAS,UAACT,KAAD,EACT;AAAA,OACSS,MADT,GACoB,MAAKR,KADzB,CACSQ,MADT;AAAA,OAESP,KAFT,GAEmB,MAAKJ,KAFxB,CAESI,KAFT;;;AAIC,OAAIO,MAAJ,EACA;AACC;AACA;AACA,QAAMC,sBAEFV,KAFE;AAGLI,0BAEIJ,MAAMI,MAFV;AAGCF;AAHD;;AAOD;AACA;AAXM,MAAN,CAYAQ,OAAOC,eAAP,GAAyBX,MAAMW,eAA/B;AACAD,WAAOE,cAAP,GAAyBZ,MAAMY,cAA/B;;AAEA,WAAOH,OAAOC,MAAP,CAAP;AACA;AACD,G,QASDG,K,GAAQ;AAAA,UAAM,MAAKC,KAAL,CAAWD,KAAX,EAAN;AAAA,G,QAERE,U,GAAa,UAACC,GAAD;AAAA,UAAS,MAAKF,KAAL,GAAaE,GAAtB;AAAA,G;;;;;yBATNd,K,EACP;AAAA,gBAC+B,KAAKD,KADpC;AAAA,OACSgB,OADT,UACSA,OADT;AAAA,OACkBC,QADlB,UACkBA,QADlB;;;AAGC,UAAO,yCAA4BhB,KAA5B,EAAmCe,OAAnC,EAA4CC,QAA5C,CAAP;AACA;;;2BAOD;AAAA,iBASG,KAAKjB,KATR;AAAA,OAGEF,QAHF,WAGEA,QAHF;AAAA,OAIEoB,OAJF,WAIEA,OAJF;AAAA,OAKEF,OALF,WAKEA,OALF;AAAA,OAMEC,QANF,WAMEA,QANF;AAAA,OAOKE,IAPL;;AAWC;AACA;AACA;;;AAbD,OAcSlB,KAdT,GAcmB,KAAKJ,KAdxB,CAcSI,KAdT;;;AAgBC,UACC;AACC,UAAK,KADN;AAEC,kBAAa;AAFd,MAGKkB,IAHL;AAIC,SAAK,KAAKL,UAJX;AAKC,WAAO,KAAKV,MAAL,CAAYH,KAAZ,CALR;AAMC,cAAU,KAAKH,QANhB;AAOC,aAASoB,OAPV;AAQC,YAAQ,KAAKV,MARd,IADD;AAWA;;;;;AAvHD;AACA;AACA;kDAEA;AAAA,OADkCP,KAClC,SADkCA,KAClC;;AACC,UAAO,EAAEA,YAAF,EAAP;AACA;;AAiCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;EAjFuCP,a,WAEhC0B,S,GACP;AACC;AACA;AACAnB,QAAQ,oBAAUoB,MAAV,CAAiBC,UAH1B;;AAKC;AACAxB,WAAW,oBAAUyB,IAAV,CAAeD,UAN3B;;AAQC;AACA;AACAJ,UAAU,oBAAUK,IAVrB;;AAYC;AACAf,SAAS,oBAAUe,IAbpB;;AAeC;AACA;AACA;AACA;AACA;AACA;AACAP,UAAU,oBAAUK,MArBrB;;AAuBC;AACAJ,WAAW,oBAAUO,MAAV,CAAiBF,UAxB7B,E;;kBAHoB1B,U","file":"InputBasic.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/custom'\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\n\n// `PureComponent` is only available in React >= 15.3.0.\nconst PureComponent = React.PureComponent || React.Component\n\n/**\n * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\n * but still works good enough. When erasing or inserting digits in the middle\n * of a phone number the caret usually jumps to the end: this is the expected\n * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\n */\n@reactLifecyclesCompat\nexport default class InputBasic extends PureComponent\n{\n\tstatic propTypes =\n\t{\n\t\t// The parsed phone number.\n\t\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\tvalue : PropTypes.string.isRequired,\n\n\t\t// Updates the `value`.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// Toggles the `--focus` CSS class.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\t\tonFocus : PropTypes.func,\n\n\t\t// `onBlur` workaround for `redux-form`'s bug.\n\t\tonBlur : PropTypes.func,\n\n\t\t// A two-letter country code for formatting `value`\n\t\t// as a national phone number (e.g. `(800) 555 35 35`).\n\t\t// E.g. \"US\", \"RU\", etc.\n\t\t// If no `country` is passed then `value`\n\t\t// is formatted as an international phone number.\n\t\t// (e.g. `+7 800 555 35 35`)\n\t\tcountry : PropTypes.string,\n\n\t\t// `libphonenumber-js` metadata.\n\t\tmetadata : PropTypes.object.isRequired\n\t}\n\n\t// Prevents React from resetting the `<input/>` caret position.\n\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t// https://github.com/facebook/react/issues/955\n\tstatic getDerivedStateFromProps({ value })\n\t{\n\t\treturn { value }\n\t}\n\n\tstate = {}\n\n\tonChange = (event) =>\n\t{\n\t\tconst { onChange } = this.props\n\t\tconst { value } = this.state\n\n\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\n\n\t\t// By default, if a value is something like `\"(123)\"`\n\t\t// then Backspace would only erase the rightmost brace\n\t\t// becoming something like `\"(123\"`\n\t\t// which would give the same `\"123\"` value\n\t\t// which would then be formatted back to `\"(123)\"`\n\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t// Working around this issue with this simple hack.\n\t\tif (newValue === value)\n\t\t{\n\t\t\tif (this.format(newValue).indexOf(event.target.value) === 0)\n\t\t\t{\n\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\tnewValue = newValue.slice(0, -1)\n\t\t\t}\n\t\t}\n\n\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t// https://github.com/facebook/react/issues/955\n\t\tthis.setState({ value: newValue }, () => onChange(newValue))\n\t}\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t// Without this fix it just gets the actual (raw) input field textual value.\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t//\n\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n\t// `redux-form` shouldn't have taken the new `value` from `event`.\n\t//\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t//\n\tonBlur = (event) =>\n\t{\n\t\tconst { onBlur } = this.props\n\t\tconst { value } = this.state\n\n\t\tif (onBlur)\n\t\t{\n\t\t\t// `event` is React's `SyntheticEvent`.\n\t\t\t// Its `.value` is read-only therefore cloning it.\n\t\t\tconst _event =\n\t\t\t{\n\t\t\t\t...event,\n\t\t\t\ttarget:\n\t\t\t\t{\n\t\t\t\t\t...event.target,\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Workaround for `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t_event.stopPropagation = event.stopPropagation\n\t\t\t_event.preventDefault  = event.preventDefault\n\n\t\t\treturn onBlur(_event)\n\t\t}\n\t}\n\n\tformat(value)\n\t{\n\t\tconst { country, metadata } = this.props\n\n\t\treturn formatIncompletePhoneNumber(value, country, metadata)\n\t}\n\n\tfocus = () => this.input.focus()\n\n\tstoreInput = (ref) => this.input = ref\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tonChange,\n\t\t\tonFocus,\n\t\t\tcountry,\n\t\t\tmetadata,\n\t\t\t...rest\n\t\t}\n\t\t= this.props\n\n\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t// https://github.com/facebook/react/issues/955\n\t\tconst { value } = this.state\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\ttype=\"tel\"\n\t\t\t\tautoComplete=\"tel\"\n\t\t\t\t{...rest}\n\t\t\t\tref={this.storeInput}\n\t\t\t\tvalue={this.format(value)}\n\t\t\t\tonChange={this.onChange}\n\t\t\t\tonFocus={onFocus}\n\t\t\t\tonBlur={this.onBlur}/>\n\t\t)\n\t}\n}"]}