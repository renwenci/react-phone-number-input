{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","Component","PhoneNumberInput","props","value","country","countries","countryOptions","labels","international","metadata","validateCountry","validateCountries","validateCountryOptions","parsed_number","pre_selected_country","state","country_select_options","generate_country_select_options","parsed_input","generateParsedInput","prevProps","name","disabled","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","InputComponent","inputComponent","ext","_","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","onCountryChange","limitMaxLength","locale","phoneNumberInputProps","hidePhoneInputField","isFocused","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","undefined","_onFocus","_onBlur","focus","storePhoneNumberInputInstance","onChange","onFocus","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","type","hasChangedCountry","old_default_country","old_value","new_default_country","new_value","new_state","propTypes","string","func","isRequired","onKeyDown","bool","arrayOf","objectOf","number","object","node","defaultProps","new_country","old_parsed_input","old_country","new_parsed_input","setState","event","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","map","label","icon","FlagComponent","InternationalIcon","options","transform","optionsOnTop","optionsOnBottom","appendTo","element","push","divider","index","indexOf","filter","option","splice","concat","throwCountryNotFound","Error"],"mappings":"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","file":"PhoneInput.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\n\n// import InputSmart from './InputSmart'\nimport InputBasic from './InputBasic'\n\nimport FlagComponent from './Flag'\n\nimport\n{\n\tmetadata as metadataPropType,\n\tlabels as labelsPropType\n}\nfrom './PropTypes'\n\nimport\n{\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tmigrateParsedInputForNewCountry,\n\tgetCountryForParsedInput,\n\te164,\n\ttrimNumber\n}\nfrom './input-control'\n\nimport { getCountryCodes } from './countries'\n\n// `PureComponent` is only available in React >= 15.3.0.\nconst PureComponent = React.PureComponent || React.Component\n\n@reactLifecyclesCompat\nexport default class PhoneNumberInput extends PureComponent\n{\n\tstatic propTypes =\n\t{\n\t\t/**\n\t\t * Phone number in `E.164` format.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `\"+12223333333\"`\n\t\t */\n\t\tvalue : PropTypes.string,\n\n\t\t/**\n\t\t * Updates the `value` as the user inputs the phone number.\n\t\t */\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * Toggles the `--focus` CSS class.\n\t\t * @ignore\n\t\t */\n\t\tonFocus : PropTypes.func,\n\n\t\t/**\n\t\t * `onBlur` is usually passed by `redux-form`.\n\t\t * @ignore\n\t\t */\n\t\tonBlur : PropTypes.func,\n\n\t\t/**\n\t\t * `onKeyDown` handler (e.g. to handle Enter key press).\n\t\t * @ignore\n\t\t */\n\t\tonKeyDown : PropTypes.func,\n\n\t\t/**\n\t\t * Disables both the phone number `<input/>`\n\t\t * and the country `<select/>`.\n\t\t */\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * Sets `autoComplete` property for phone number `<input/>`.\n\t\t *\n\t\t * Web browser's \"autocomplete\" feature\n\t\t * remembers the phone number being input\n\t\t * and can also autofill the `<input/>`\n\t\t * with previously remembered phone numbers.\n\t\t *\n\t\t * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n\t\t *\n\t\t * For example, can be used to turn it off:\n\t\t *\n\t\t * \"So when should you use `autocomplete=\"off\"`?\n\t\t *  One example is when you've implemented your own version\n\t\t *  of autocomplete for search. Another example is any form field\n\t\t *  where users will input and submit different kinds of information\n\t\t *  where it would not be useful to have the browser remember\n\t\t *  what was submitted previously\".\n\t\t */\n\t\t// (is `\"tel\"` by default)\n\t\tautoComplete : PropTypes.string.isRequired,\n\n\t\t/**\n\t\t * Set to `true` to show the initial `value` in\n\t\t * \"national\" format rather than \"international\".\n\t\t *\n\t\t * For example, if this flag is set to `true`\n\t\t * and the initial `value=\"+12133734253\"` is passed\n\t\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\n\t\t *\n\t\t * By default, this flag is set to `false`,\n\t\t * meaning that if the initial `value=\"+12133734253\"` is passed\n\t\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n\t\t *\n\t\t * The reason for such default behaviour is that\n\t\t * the newer generation grows up when there are no stationary phones\n\t\t * and therefore everyone inputs phone numbers in international format\n\t\t * in their smartphones so people gradually get more accustomed to\n\t\t * writing phone numbers in international format rather than in local format.\n\t\t * Future people won't be using \"national\" format, only \"international\".\n\t\t */\n\t\t// (is `false` by default)\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * The country to be selected by default.\n\t\t * For example, can be set after a GeoIP lookup.\n\t\t *\n\t\t * Example: `\"US\"`.\n\t\t */\n\t\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\t\tcountry : PropTypes.string,\n\n\t\t/**\n\t\t * If specified, only these countries will be available for selection.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `[\"RU\", \"UA\", \"KZ\"]`\n\t\t */\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\n\n\t\t/**\n\t\t * Custom country `<select/>` option names.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n\t\t */\n\t\tlabels : labelsPropType.isRequired,\n\n\t\t/**\n\t\t * The base URL path for country flag icons.\n\t\t * By default it loads country flag icons from\n\t\t * `flag-icon-css` repo github pages website.\n\t\t * I imagine someone might want to download\n\t\t * those country flag icons and host them\n\t\t * on their own servers instead.\n\t\t */\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t/**\n\t\t * Custom country flag icon components.\n\t\t * These flags replace the default ones.\n\t\t *\n\t\t * The shape is an object where keys are country codes\n\t\t * and values are flag icon components.\n\t\t * Flag icon components receive the same properties\n\t\t * as `flagComponent` (see below).\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `{ \"RU\": () => <img src=\"...\"/> }`\n\t\t *\n\t\t * Can be used to replace the default flags\n\t\t * with custom ones for certain (or all) countries.\n\t\t *\n\t\t * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\n\t\t *\n\t\t * By default flag icons are inserted as `<img/>`s\n\t\t * with their `src` pointed to `flag-icon-css` repo github pages website.\n\t\t *\n\t\t * There might be some cases\n\t\t * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\n\t\t * when including the full set of `<svg/>` country flags (3 megabytes)\n\t\t * is more appropriate than downloading them individually at runtime only if needed.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `// Uses <svg/> flags (3 megabytes):`\n\t\t *\n\t\t * `import flags from 'react-phone-number-input/flags'`\n\t\t *\n\t\t * `import PhoneInput from 'react-phone-number-input'`\n\t\t *\n\t\t * `<PhoneInput flags={flags} .../>`\n\t\t */\n\t\tflags : PropTypes.objectOf(PropTypes.func),\n\n\t\t/**\n\t\t * Country flag icon component.\n\t\t *\n\t\t * Takes properties:\n\t\t *\n\t\t * * country : string — The country code.\n\t\t * * flagsPath : string — The `flagsPath` property (see above).\n\t\t * * flags : object — The `flags` property (see above).\n\t\t */\n\t\tflagComponent : PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * Set to `false` to drop the \"International\" option from country `<select/>`.\n\t\t */\n\t\tinternational : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * Custom \"International\" country `<select/>` option icon.\n\t\t */\n\t\tinternationalIcon : PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * Set to `false` to hide country `<select/>`.\n\t\t */\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * HTML `tabindex` attribute for country `<select/>`.\n\t\t */\n\t\tcountrySelectTabIndex : PropTypes.number,\n\n\t\t/**\n\t\t * Can be used to place some countries on top of the list of country `<select/>` options.\n\t\t *\n\t\t * * `\"|\"` — inserts a separator.\n\t\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n\t\t */\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\n\n\t\t/**\n\t\t * `<Phone/>` component CSS style object.\n\t\t */\n\t\tstyle : PropTypes.object,\n\n\t\t/**\n\t\t * `<Phone/>` component CSS class.\n\t\t */\n\t\tclassName : PropTypes.string,\n\n\t\t/**\n\t\t * Phone number `<input/>` CSS class.\n\t\t */\n\t\tinputClassName : PropTypes.string,\n\n\t\t/**\n\t\t * Returns phone number `<input/>` CSS class string.\n\t\t * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\n\t\t * @ignore\n\t\t */\n\t\tgetInputClassName : PropTypes.func,\n\n\t\t/**\n\t\t * Country `<select/>` component.\n\t\t *\n\t\t * Receives properties:\n\t\t *\n\t\t * * `name : string?` — HTML `name` attribute.\n\t\t * * `value : string?` — The currently selected country code.\n\t\t * * `onChange(value : string?)` — Updates the `value`.\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\n\t\t * * `disabled : boolean?` — HTML `disabled` attribute.\n\t\t * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\n\t\t * * `className : string` — CSS class name.\n\t\t */\n\t\t//\n\t\t// (deprecated)\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n\t\t//\n\t\tcountrySelectComponent : PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * Phone number `<input/>` component.\n\t\t *\n\t\t * Receives properties:\n\t\t *\n\t\t * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\t * * `onChange(value : string)` — Updates the `value`.\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t\t * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\n\t\t * * `metadata : object` — `libphonenumber-js` metadata.\n\t\t * * All other properties should be passed through to the underlying `<input/>`.\n\t\t *\n\t\t * Must also implement `.focus()` method.\n\t\t */\n\t\tinputComponent : PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\n\t\t * instead of `input-format`'s `<ReactInput/>`.\n\t\t * Is `false` by default.\n\t\t */\n\t\t// smartCaret : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * Phone number extension `<input/>` element.\n\t\t *\n\t\t * Example:\n\t\t *\n\t\t *\t`ext={<input value={...} onChange={...}/>}`\n\t\t */\n\t\text : PropTypes.node,\n\n\t\t/**\n\t\t * If set to `true` the phone number input will get trimmed\n\t\t * if it exceeds the maximum length for the country.\n\t\t */\n\t\tlimitMaxLength : PropTypes.bool.isRequired,\n\n\t\t/**\n\t\t * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\n\t\t */\n\t\terror : PropTypes.string,\n\n\t\t/**\n\t\t * The `error` is shown only when `indicateInvalid` is `true`.\n\t\t * (which is the default).\n\t\t * @deprecated\n\t\t * @ignore\n\t\t */\n\t\tindicateInvalid : PropTypes.bool,\n\n\t\t/**\n\t\t * Translation JSON object. See the `locales` directory for examples.\n\t\t */\n\t\tlocale : PropTypes.objectOf(PropTypes.string),\n\n\t\t/**\n\t\t * `libphonenumber-js` metadata.\n\t\t *\n\t\t * Can be used to pass custom `libphonenumber-js` metadata\n\t\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\n\t\t */\n\t\tmetadata : metadataPropType.isRequired,\n\n\t\t/**\n\t\t * A long time ago a person requested an `onCountryChange(country)` event listener.\n\t\t * No valid reason was given other than compliance with some legacy code\n\t\t * which stored both phone number and country in a database.\n\t\t * @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t\t */\n\t\tonCountryChange : PropTypes.func\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t/**\n\t\t * Not disabled.\n\t\t */\n\t\tdisabled: false,\n\n\t\t/**\n\t\t * Show `error` (if passed).\n\t\t * @deprecated\n\t\t */\n\t\tindicateInvalid : true,\n\n\t\t/**\n\t\t * Remember (and autofill) the value as a phone number.\n\t\t */\n\t\tautoComplete: 'tel',\n\n\t\t/**\n\t\t * Flag icon component.\n\t\t */\n\t\tflagComponent: FlagComponent,\n\n\t\t/**\n\t\t * By default use icons from `flag-icon-css` github repo.\n\t\t */\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t/**\n\t\t * Default \"International\" country `<select/>` option icon (globe).\n\t\t */\n\t\t // internationalIcon: InternationalIcon,\n\n\t\t/**\n\t\t * Phone number `<input/>` component.\n\t\t */\n\t\tinputComponent: InputBasic,\n\n\t\t/**\n\t\t * Show country `<select/>`.\n\t\t */\n\t\tshowCountrySelect: true,\n\n\t\t/**\n\t\t * Don't convert the initially passed phone number `value`\n\t\t * to a national phone number for its country.\n\t\t * The reason is that the newer generation grows up when\n\t\t * there are no stationary phones and therefore everyone inputs\n\t\t * phone numbers with a `+` in their smartphones\n\t\t * so phone numbers written in international form\n\t\t * are gradually being considered more natural than local ones.\n\t\t */\n\t\tdisplayInitialValueAsLocalNumber: false,\n\n\t\t/**\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\n\t\t * instead of `input-format`'s `<ReactInput/>`.\n\t\t * Is `false` by default.\n\t\t */\n\t\t// smartCaret : false,\n\n\t\t/**\n\t\t * Whether to add the \"International\" option\n\t\t * to the list of countries.\n\t\t */\n\t\tinternational : true,\n\n\t\t/**\n\t\t * If set to `true` the phone number input will get trimmed\n\t\t * if it exceeds the maximum length for the country.\n\t\t */\n\t\tlimitMaxLength : false\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst\n\t\t{\n\t\t\tvalue,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tcountryOptions,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t}\n\t\t= this.props\n\n\t\tif (country) {\n\t\t\tvalidateCountry(country, metadata)\n\t\t}\n\t\tif (countries) {\n\t\t\tvalidateCountries(countries, metadata)\n\t\t}\n\t\tif (countryOptions) {\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\n\t\t}\n\n\t\tconst parsed_number = parsePhoneNumber(value, metadata)\n\n\t\tconst pre_selected_country = getPreSelectedCountry\n\t\t(\n\t\t\tparsed_number,\n\t\t\tcountry,\n\t\t\tcountries || getCountryCodes(labels),\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t)\n\n\t\tthis.state =\n\t\t{\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops : this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry : pre_selected_country,\n\n\t\t\t// Generate country `<select/>` options.\n\t\t\tcountry_select_options : generate_country_select_options(this.props),\n\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\n\t\t\tparsed_input : generateParsedInput(value, parsed_number, this.props),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `parsed_input` needs updating:\n\t\t\t// If the `value` property changed externally\n\t\t\t// then it won't be equal to state `value`\n\t\t\t// in which case `parsed_input` and `country` get updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst {\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tcountryOptions,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tif (country && country !== prevProps.country) {\n\t\t\tvalidateCountry(country, metadata)\n\t\t}\n\t\tif (countries && countries !== prevProps.countries) {\n\t\t\tvalidateCountries(countries, metadata)\n\t\t}\n\t\tif (countryOptions && countryOptions !== prevProps.countryOptions) {\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\n\t\t}\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\tonCountryChange = (new_country) =>\n\t{\n\t\tconst\n\t\t{\n\t\t\tmetadata,\n\t\t\tonChange,\n\t\t\tonCountryChange,\n\t\t\tdisplayInitialValueAsLocalNumber\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tparsed_input : old_parsed_input,\n\t\t\tcountry      : old_country\n\t\t}\n\t\t= this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\n\t\t(\n\t\t\told_parsed_input,\n\t\t\told_country,\n\t\t\tnew_country,\n\t\t\tmetadata,\n\t\t\tdisplayInitialValueAsLocalNumber\n\t\t)\n\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\n\n\t\tif (onCountryChange) {\n\t\t\tonCountryChange(new_country)\n\t\t}\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\tthis.focus()\n\n\t\tthis.setState\n\t\t({\n\t\t\tcountry           : new_country,\n\t\t\thasChangedCountry : true,\n\t\t\tparsed_input      : new_parsed_input,\n\t\t\tvalue             : new_value\n\t\t},\n\t\t() =>\n\t\t{\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(new_value)\n\t\t})\n\t}\n\n\t// Phone number `<input/>` `onKeyDown` handler.\n\tonPhoneNumberKeyDown = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n\t\t// so can't hijack \"Down arrow\" keypress here.\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\n\t\t// if (event.keyCode === 40) {\n\t\t// \tthis.country_select.toggle()\n\t\t// }\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `value` property accordingly.\n\t// (so that they are kept in sync).\n\t// `parsed_input` must be a parsed phone number\n\t// or an empty string.\n\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\tonChange = (parsed_input) =>\n\t{\n\t\tconst\n\t\t{\n\t\t\tonChange,\n\t\t\tonCountryChange,\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tmetadata\n\t\t}\n\t\t= this.props\n\n\t\tlet { country } = this.state\n\n\t\tif (parsed_input)\n\t\t{\n\t\t\t// If the phone number being input is an international one\n\t\t\t// then tries to derive the country from the phone number.\n\t\t\t// (regardless of whether there's any country currently selected)\n\t\t\tif (parsed_input[0] === '+')\n\t\t\t{\n\t\t\t\tconst old_country = country\n\t\t\t\tcountry = getCountryForParsedInput\n\t\t\t\t(\n\t\t\t\t\tparsed_input,\n\t\t\t\t\tcountry,\n\t\t\t\t\tcountries,\n\t\t\t\t\tinternational,\n\t\t\t\t\tmetadata\n\t\t\t\t)\n\n\t\t\t\tif (country !== old_country && onCountryChange) {\n\t\t\t\t\tonCountryChange(country)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If this `onChange()` event was triggered\n\t\t\t// as a result of selecting \"International\" country\n\t\t\t// then force-prepend a `+` sign if the phone number\n\t\t\t// `<input/>` value isn't in international format.\n\t\t\telse if (!country)\n\t\t\t{\n\t\t\t\tparsed_input = '+' + parsed_input\n\t\t\t}\n\t\t}\n\n\t\t// Trim the input to not exceed the maximum possible number length.\n\t\tif (limitMaxLength) {\n\t\t\tparsed_input = trimNumber(parsed_input, country, metadata)\n\t\t}\n\n\t\t// Generate the new `value` property.\n\t\tconst value = e164(parsed_input, country, metadata)\n\n\t\tthis.setState\n\t\t({\n\t\t\tparsed_input,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t},\n\t\t// Update the new `value` property.\n\t\t// Doing it after the `state` has been updated\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t() => onChange(value))\n\t}\n\n\t// Toggles the `--focus` CSS class.\n\t_onFocus = () => this.setState({ isFocused: true })\n\n\t// Toggles the `--focus` CSS class.\n\t_onBlur = () => this.setState({ isFocused: false })\n\n\tonFocus = (event) =>\n\t{\n\t\tconst { onFocus } = this.props\n\n\t\tthis._onFocus()\n\n\t\tif (onFocus) {\n\t\t\tonFocus(event)\n\t\t}\n\t}\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t// Without this fix it just gets the actual (raw) input field textual value.\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t//\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t//\n\tonBlur = (event) =>\n\t{\n\t\tconst { onBlur } = this.props\n\t\tconst { value } = this.state\n\n\t\tthis._onBlur()\n\n\t\tif (!onBlur) {\n\t\t\treturn\n\t\t}\n\n\t\t// `event` is React's `SyntheticEvent`.\n\t\t// Its `.value` is read-only therefore cloning it.\n\t\tconst _event =\n\t\t{\n\t\t\t...event,\n\t\t\ttarget:\n\t\t\t{\n\t\t\t\t...event.target,\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\n\t\t// For `redux-form` event detection.\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t_event.stopPropagation = event.stopPropagation\n\t\t_event.preventDefault  = event.preventDefault\n\n\t\treturn onBlur(_event)\n\t}\n\n\t// When country `<select/>` is toggled.\n\thidePhoneInputField = (hide) =>\n\t{\n\t\tthis.setState({\n\t\t\thidePhoneInputField: hide\n\t\t})\n\t}\n\n\t// Can be called externally.\n\tfocus = () => this.number_input.focus()\n\n\tstoreCountrySelectInstance = _ => this.country_select = _\n\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\n\n\tstatic getDerivedStateFromProps(props, state)\n\t{\n\t\tconst\n\t\t{\n\t\t\tcountry,\n\t\t\thasChangedCountry,\n\t\t\tvalue,\n\t\t\tprops:\n\t\t\t{\n\t\t\t\tcountry : old_default_country,\n\t\t\t\tvalue   : old_value\n\t\t\t}\n\t\t}\n\t\t= state\n\n\t\tconst\n\t\t{\n\t\t\tmetadata,\n\t\t\tcountry : new_default_country,\n\t\t\tvalue   : new_value\n\t\t}\n\t\t= props\n\n\t\t// Emulate `prevProps` via `state.props`.\n\t\tconst new_state = { props }\n\n\t\t// If `countries` or `labels` or `international` changed\n\t\t// then re-generate country `<select/>` options.\n\t\tif (props.countries !== state.props.countries ||\n\t\t\tprops.labels !== state.props.labels ||\n\t\t\tprops.international !== state.props.international)\n\t\t{\n\t\t\tnew_state.country_select_options = generate_country_select_options(props)\n\t\t}\n\n\t\t// If the default country changed.\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t\t// then select it but only if the user didn't previously select\n\t\t// another country and no phone number has been entered so far.\n\t\t// Because if the user has already started inputting a phone number\n\t\t// then he's okay with no country being selected at all (\"International\")\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\t\tif (new_default_country !== old_default_country && !hasChangedCountry && !value && !new_value)\n\t\t{\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tcountry : new_default_country\n\t\t\t}\n\t\t}\n\t\t// If a new `value` is set externally.\n\t\t// (e.g. as a result of an ajax API request\n\t\t//  to get user's phone after page loaded)\n\t\t// The first part — `new_value !== old_value` —\n\t\t// is basically `props.value !== prevProps.value`\n\t\t// so it means \"if value property was changed externally\".\n\t\t// The second part — `new_value !== value` —\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t\t// then the country flag would reset on each input.\n\t\telse if (new_value !== old_value && new_value !== value)\n\t\t{\n\t\t\tconst parsed_number = parsePhoneNumber(new_value, metadata)\n\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tparsed_input : generateParsedInput(new_value, parsed_number, props),\n\t\t\t\tvalue : new_value,\n\t\t\t\tcountry : new_value ? parsed_number.country : country\n\t\t\t}\n\t\t}\n\n\t\t// Maybe `new_state.country_select_options` changed.\n\t\t// In any case, update `prevProps`.\n\t\treturn new_state\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tname,\n\t\t\tdisabled,\n\t\t\tautoComplete,\n\t\t\tcountrySelectTabIndex,\n\t\t\tshowCountrySelect,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tinputClassName,\n\t\t\tgetInputClassName,\n\t\t\tcountrySelectProperties,\n\n\t\t\terror,\n\t\t\tindicateInvalid,\n\n\t\t\tcountrySelectComponent : CountrySelectComponent,\n\t\t\tinputComponent : InputComponent,\n\t\t\t// smartCaret,\n\t\t\text,\n\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\n\t\t\tcountries,\n\t\t\tcountryOptions,\n\t\t\tlabels,\n\t\t\tcountry : _,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagsPath,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tonCountryChange,\n\t\t\tlimitMaxLength,\n\t\t\tlocale,\n\t\t\tmetadata,\n\t\t\t...phoneNumberInputProps\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tcountry,\n\t\t\thidePhoneInputField,\n\t\t\tcountry_select_options,\n\t\t\tparsed_input,\n\t\t\tisFocused\n\t\t}\n\t\t= this.state\n\n\t\t// const InputComponent = inputComponent || (smartCaret ? InputSmart : InputBasic)\n\n\t\t// Extract `countrySelectProperties` from `this.props`\n\t\t// also removing them from `phoneNumberInputProps`.\n\t\tconst _countrySelectProps = {}\n\t\tif (countrySelectProperties)\n\t\t{\n\t\t\tfor (const key in countrySelectProperties)\n\t\t\t{\n\t\t\t\tif (this.props.hasOwnProperty(key))\n\t\t\t\t{\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\n\t\t\t\t\tdelete phoneNumberInputProps[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={ style }\n\t\t\t\tclassName={ classNames('react-phone-number-input',\n\t\t\t\t{\n\t\t\t\t\t'react-phone-number-input--focus'   : isFocused,\n\t\t\t\t\t'react-phone-number-input--invalid' : error && indicateInvalid\n\t\t\t\t},\n\t\t\t\tclassName) }>\n\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\n\t\t\t\t<div className=\"react-phone-number-input__row\">\n\n\t\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t\t{ showCountrySelect &&\n\t\t\t\t\t\t<CountrySelectComponent\n\t\t\t\t\t\t\t{..._countrySelectProps}\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\n\t\t\t\t\t\t\tvalue={ country }\n\t\t\t\t\t\t\toptions={ country_select_options }\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\n\t\t\t\t\t\t\tonFocus={ this._onFocus }\n\t\t\t\t\t\t\tonBlur={ this._onBlur }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t\t{ !hidePhoneInputField &&\n\t\t\t\t\t\t<InputComponent\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\tname={ name }\n\t\t\t\t\t\t\t{ ...phoneNumberInputProps }\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\n\t\t\t\t\t\t\tmetadata={ metadata }\n\t\t\t\t\t\t\tcountry={ country }\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\n\t\t\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t\t\t\tonFocus={ this.onFocus }\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\n\t\t\t\t\t\t\tclassName={ classNames\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinputClassName,\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled, invalid: error && indicateInvalid })\n\t\t\t\t\t\t\t) }/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone extension `<input/>` */}\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\n\t\t\t\t\t\t\t{labels.ext}\n\t\t\t\t\t\t\t{React.cloneElement(ext,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype : ext.props.type === undefined ? 'number' : ext.props.type,\n\t\t\t\t\t\t\t\tonFocus : this._onFocus,\n\t\t\t\t\t\t\t\tonBlur : this._onBlur,\n\t\t\t\t\t\t\t\tclassName : classNames\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tinputClassName,\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled }),\n\t\t\t\t\t\t\t\t\text.props.className\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{/* Error message */}\n\t\t\t\t{ error && indicateInvalid &&\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\n\t\t\t\t\t\t{ error }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Generates country `<select/>` options.\nfunction generate_country_select_options(props)\n{\n\tconst\n\t{\n\t\tcountries,\n\t\tlabels,\n\t\tinternational,\n\t\tcountryOptions\n\t}\n\t= props\n\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\n\n\treturn transformCountryOptions(getCountrySelectOptions\n\t(\n\t\tcountries || getCountryCodes(labels),\n\t\tlabels,\n\t\tinternational\n\t)\n\t.map(({ value, label }) =>\n\t({\n\t\tvalue,\n\t\tlabel,\n\t\ticon : CountrySelectOptionIcon\n\t})),\n\tcountryOptions)\n}\n\nfunction createCountrySelectOptionIconComponent(props)\n{\n\tconst\n\t{\n\t\tflags,\n\t\tflagsPath,\n\t\tflagComponent : FlagComponent,\n\t\tinternationalIcon : InternationalIcon\n\t}\n\t= props\n\n\treturn ({ value }) => (\n\t\t<div\n\t\t\tclassName={classNames('react-phone-number-input__icon',\n\t\t\t{\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\n\t\t\t})}>\n\t\t\t{\n\t\t\t\tvalue\n\t\t\t\t?\n\t\t\t\t<FlagComponent\n\t\t\t\t\tcountry={value}\n\t\t\t\t\tflags={flags}\n\t\t\t\t\tflagsPath={flagsPath}/>\n\t\t\t\t:\n\t\t\t\t<InternationalIcon/>\n\t\t\t}\n\t\t</div>\n\t)\n}\n\n// Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\nfunction transformCountryOptions(options, transform)\n{\n\tif (!transform) {\n\t\treturn options\n\t}\n\n\tconst optionsOnTop = []\n\tconst optionsOnBottom = []\n\tlet appendTo = optionsOnTop\n\n\tfor (const element of transform)\n\t{\n\t\tif (element === '|')\n\t\t{\n\t\t\tappendTo.push({ divider: true })\n\t\t}\n\t\telse if (element === '...' || element === '…')\n\t\t{\n\t\t\tappendTo = optionsOnBottom\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Find the position of the option.\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\n\t\t\t// Get the option.\n\t\t\tconst option = options[index]\n\t\t\t// Remove the option from its default position.\n\t\t\toptions.splice(index, 1)\n\t\t\t// Add the option on top.\n\t\t\tappendTo.push(option)\n\t\t}\n\t}\n\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\n}\n\nfunction generateParsedInput(value, parsed_number, props)\n{\n\tconst\n\t{\n\t\tdisplayInitialValueAsLocalNumber,\n\t\tmetadata\n\t}\n\t= props\n\n\t// If the `value` (E.164 phone number)\n\t// belongs to the currently selected country\n\t// and `displayInitialValueAsLocalNumber` property is `true`\n\t// then convert `value` (E.164 phone number)\n\t// to a local phone number digits.\n\t// E.g. '+78005553535' -> '88005553535'.\n\tif (displayInitialValueAsLocalNumber && parsed_number.country)\n\t{\n\t\treturn generateNationalNumberDigits(parsed_number, metadata)\n\t}\n\n\treturn value\n}\n\nfunction validateCountryOptions(countries, metadata) {\n\tfor (const country of countries) {\n\t\tif (country && country !== '|' && country !== '...' && country !== '…') {\n\t\t\tif (!metadata.countries[country]) {\n\t\t\t\tthrowCountryNotFound(country)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction validateCountries(countries, metadata) {\n\tfor (const country of countries) {\n\t\tif (!metadata.countries[country]) {\n\t\t\tthrowCountryNotFound(country)\n\t\t}\n\t}\n}\n\nfunction validateCountry(country, metadata) {\n\tif (!metadata.countries[country]) {\n\t\tthrowCountryNotFound(country)\n\t}\n}\n\nfunction throwCountryNotFound(country) {\n\tthrow new Error(`Country not found: ${country}`)\n}\n"]}